{"version":3,"sources":["components/SetPanel.module.css","components/Counter.module.css","App.module.css","components/Button.module.css","components/NumberCount.jsx","components/Button.jsx","components/Counter.jsx","components/SetPanel.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","NumberCount","render","props","numberMax","currentValue","maxValue","className","React","Component","Button","classes","button","onClick","funcItem","disabled","disable","buttonName","Counter","s","counter","styleCounter","state","buttons","disabledInc","addNumber","disabledRes","resetNumber","SetPanel","styleInput","inputError","input","setPanel","setInput","max","type","value","onChange","changeMaxValue","minValue","changeMinValue","setNumbers","disabledSet","App","stepCounter","setState","e","newValue","Number","currentTarget","saveState","newMinValue","ssd","JSON","stringify","localStorage","setItem","str","getItem","obj","parse","this","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2edd4541.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"setPanel\":\"SetPanel_setPanel__AdHql\",\"setInput\":\"SetPanel_setInput__vKozW\",\"input\":\"SetPanel_input__1SxXR\",\"max\":\"SetPanel_max__2Iptu\",\"inputError\":\"SetPanel_inputError__1IrWg\",\"buttons\":\"SetPanel_buttons__2iJaW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"Counter_counter__3XvWd\",\"buttons\":\"Counter_buttons__KtimU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__3BUbH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__yfywO\",\"buttonFilter\":\"Button_buttonFilter__342WA\"};","import React from 'react';\nimport './NumberCount.css';\n\nclass NumberCount extends React.Component {\n    render = (props) => {\n        let numberMax = this.props.currentValue === this.props.maxValue || this.props.currentValue === 'Incorrect value' ? \"maxFilter\" : \"numberCount\";\n\n        return (\n            <div className = {numberMax}>\n                <span> {this.props.currentValue} </span>\n            </div>\n        );\n    };\n}\n\nexport default NumberCount;\n","import React from 'react';\nimport classes from './Button.module.css'\n\nclass Button extends React.Component {\n    render = () => {\n        return (\n            <button className={classes.button} onClick={this.props.funcItem} disabled={this.props.disable}>\n                {this.props.buttonName}\n            </button>\n        );\n    };\n}\n\nexport default Button;\n","import React from 'react';\nimport s from './Counter.module.css'\nimport NumberCount from './NumberCount'\nimport Button from \"./Button\";\n\nclass Counter extends React.Component {\n    render = () => {\n        return (\n            <div className={s.counter}>\n                <NumberCount\n                    styleCounter={this.props.styleCounter}\n                    currentValue={this.props.state.currentValue}\n                    maxValue={this.props.state.maxValue}\n                />\n                <div className={s.buttons}>\n                    <Button disable={this.props.disabledInc}\n                            buttonName={'Inc'}\n                            funcItem={this.props.addNumber}/>\n                    <Button disable={this.props.disabledRes}\n                            buttonName={'Reset'}\n                            funcItem={this.props.resetNumber}/>\n                </div>\n            </div>\n        );\n    };\n}\n\nexport default Counter;\n","import React from 'react';\nimport s from './SetPanel.module.css';\nimport Button from \"./Button\";\n\nclass SetPanel extends React.Component {\n\n\n    render = () => {\n        let styleInput = this.props.state.currentValue === 'Incorrect value' ? s.inputError : s.input;\n        return (\n            <div className={s.setPanel}>\n                <div className={s.setInput}>\n                    <div className={s.max}>\n                        Max Value:\n                        <input className={styleInput} type=\"number\" value={this.props.state.maxValue} onChange={this.props.changeMaxValue}/>\n                    </div>\n                    <div>\n                        Start Value:\n                        <input className={styleInput} type=\"number\" value={this.props.state.minValue} onChange={this.props.changeMinValue}/>\n                    </div>\n                </div>\n                <div className={s.buttons}>\n                    <Button buttonName={'Set'} funcItem={this.props.setNumbers} disable={this.props.disabledSet}/>\n                </div>\n            </div>\n        );\n    };\n}\n\nexport default SetPanel;\n","import React from 'react';\nimport s from './App.module.css';\nimport Counter from \"./components/Counter\";\nimport SetPanel from \"./components/SetPanel\";\n\nclass App extends React.Component {\n    state = {\n        currentValue: 0,\n        stepCounter: 1,\n        maxValue: 5,\n        minValue: 0\n    }\n\n    componentDidMount() {\n        let str = localStorage.getItem('counter');\n        let obj = JSON.parse(str)\n        this.setState(obj)\n    }\n\n\n    addNumber = () => {\n        this.setState({\n            currentValue: this.state.currentValue + this.state.stepCounter\n        })\n    };\n\n    resetNumber = () => {\n        this.setState({\n            currentValue: this.state.minValue\n        })\n    }\n\n    changeMaxValue = (e) => {\n        let newValue = Number(e.currentTarget.value);\n        if (newValue < 0 || newValue <= this.state.minValue || this.state.minValue < 0) {\n            this.setState({\n                maxValue: newValue,\n                currentValue: 'Incorrect value'\n            }, () => {\n                this.saveState()\n            })\n        } else {\n            this.setState({\n                maxValue: newValue,\n                currentValue: 'Enter value and press \\'Set\\''\n            }, () => {\n                this.saveState()\n            })\n        }\n    }\n\n    changeMinValue = (e) => {\n        let newMinValue = Number(e.currentTarget.value);\n        if (newMinValue < 0 || newMinValue >= this.state.maxValue) {\n            this.setState({\n                minValue: newMinValue,\n                currentValue: 'Incorrect value'\n            }, () => {\n                this.saveState()\n            })\n        } else {\n            this.setState({\n                minValue: newMinValue,\n                currentValue: 'Enter value and press \\'Set\\''\n            }, () => {\n                this.saveState()\n            })\n        }\n    }\n\n    setNumbers = () => {\n        this.setState({\n            currentValue: this.state.minValue\n        })\n    }\n\n    saveState = () => {\n        let ssd = JSON.stringify(this.state)\n        localStorage.setItem('counter', ssd)\n    }\n\n    render = () => {\n        let disabledSet = this.state.maxValue === this.state.minValue || this.state.minValue < 0 || this.state.maxValue < 0 || this.state.minValue > this.state.maxValue;\n        let disabledInc = this.state.currentValue === this.state.maxValue || this.state.currentValue === 'Incorrect value' || this.state.currentValue === 'Enter value and press \\'Set\\'';\n        let disabledRes = this.state.currentValue === this.state.minValue || this.state.currentValue === 'Incorrect value' || this.state.currentValue === 'Enter value and press \\'Set\\'';\n\n        return (\n            <div className={s.App}>\n                <SetPanel state={this.state}\n                          disabledSet={disabledSet}\n                          changeMinValue={this.changeMinValue}\n                          setNumbers={this.setNumbers}\n                          changeMaxValue={this.changeMaxValue}/>\n                <Counter state={this.state}\n                         disabledInc={disabledInc}\n                         disabledRes={disabledRes}\n                         addNumber={this.addNumber}\n                         resetNumber={this.resetNumber} />\n            </div>\n        );\n    };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. NumberCount is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}