{"version":3,"sources":["components/Counter.module.css","App.module.css","components/Button.module.css","components/NumberCount.jsx","components/Button.jsx","components/Counter.jsx","redux/reducer.js","components/SetPanel.jsx","App.js","serviceWorker.js","redux/redux-store.js","index.js","components/SetPanel.module.css"],"names":["module","exports","NumberCount","render","numberMax","props","currentValue","maxValue","className","React","Component","connect","state","Button","classes","button","onClick","funcItem","disabled","disable","buttonName","Counter","s","counter","styleCounter","buttons","disabledInc","addNumber","disabledRes","resetNumber","initialState","minValue","errorSet","warningSet","reducer","action","type","newErrorMax","newMaxValue","newErrorMin","newMinValue","SetPanel","changeMaxValue","e","newValue","Number","currentTarget","value","changeMinValue","styleInput","inputError","input","setPanel","setInput","max","onChange","setNumbers","disabledSet","dispatch","changeMaxValueAC","changeMinValueAC","App","ContainedApp","Boolean","window","location","hostname","match","store","createStore","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.450439b4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"Counter_counter__3XvWd\",\"buttons\":\"Counter_buttons__KtimU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__3BUbH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__yfywO\",\"buttonFilter\":\"Button_buttonFilter__342WA\"};","import React from 'react';\nimport './NumberCount.css';\nimport {connect} from \"react-redux\";\n\nclass NumberCount extends React.Component {\n    render = () => {\n        let numberMax = this.props.currentValue >= this.props.maxValue || this.props.currentValue === 'Incorrect value' ? \"maxFilter\" : \"numberCount\";\n        return (\n            <div className = {numberMax}>\n                <span> {this.props.currentValue} </span>\n            </div>\n        );\n    };\n}\n\nconst  mstp = (state) => {\n    return {\n        maxValue: state.maxValue,\n        currentValue: state.currentValue\n    }\n}\n\n\nexport default connect(mstp)(NumberCount);\n","import React from 'react';\nimport classes from './Button.module.css'\n\nclass Button extends React.Component {\n    render = () => {\n        return (\n            <button className={classes.button} onClick={this.props.funcItem} disabled={this.props.disable}>\n                {this.props.buttonName}\n            </button>\n        );\n    };\n}\n\nexport default Button;\n","import React from 'react';\nimport s from './Counter.module.css'\nimport NumberCount from './NumberCount'\nimport Button from \"./Button\";\n\nclass Counter extends React.Component {\n    render = () => {\n        return (\n            <div className={s.counter}>\n                <NumberCount\n                    styleCounter={this.props.styleCounter}\n                />\n                <div className={s.buttons}>\n                    <Button disable={this.props.disabledInc}\n                            buttonName={'Inc'}\n                            funcItem={this.props.addNumber}/>\n                    <Button disable={this.props.disabledRes}\n                            buttonName={'Reset'}\n                            funcItem={this.props.resetNumber}/>\n                </div>\n            </div>\n        );\n    };\n}\n\nexport default Counter;\n","const ADD_NUMBER = 'ADD_NUMBER'\r\nconst RESET_NUMBER = 'RESET_NUMBER'\r\nconst SET_NUMBER = 'SET_NUMBER'\r\nconst CHANGE_MAX_VALUE = 'CHANGE_MAX_VALUE'\r\nconst CHANGE_MIN_VALUE = 'CHANGE_MIN_VALUE'\r\n\r\nconst initialState = {\r\n    currentValue: 0,\r\n    maxValue: 6,\r\n    minValue: 0,\r\n    errorSet: 'Incorrect value',\r\n    warningSet: \"Enter value and press \\'Set\\'\"\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    debugger\r\n    switch (action.type) {\r\n        case ADD_NUMBER:\r\n            debugger\r\n            return {\r\n                ...state,\r\n                currentValue: state.currentValue + 1\r\n            }\r\n        case RESET_NUMBER:\r\n            return {\r\n                ...state,\r\n                currentValue: state.minValue\r\n            }\r\n        case SET_NUMBER:\r\n            return {\r\n                ...state,\r\n                currentValue: state.minValue\r\n            }\r\n        case CHANGE_MAX_VALUE:\r\n            const newErrorMax = state.minValue >= action.maxValue? state.errorSet: state.warningSet\r\n            const newMaxValue = 0 > action.maxValue? state.maxValue: action.maxValue\r\n            return {\r\n                ...state,\r\n                currentValue: newErrorMax,\r\n                maxValue: newMaxValue\r\n            }\r\n        case CHANGE_MIN_VALUE:\r\n            const newErrorMin = state.maxValue <= action.minValue? state.errorSet: state.warningSet\r\n            const newMinValue = 0 <= action.minValue ? action.minValue: state.minValue\r\n            return {\r\n                ...state,\r\n                currentValue: newErrorMin,\r\n                minValue: newMinValue\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addNumber = () => ({type: ADD_NUMBER})\r\nexport const resetNumber = () => ({type: RESET_NUMBER})\r\nexport const setNumbers = () => ({type: SET_NUMBER})\r\nexport const changeMaxValueAC = (maxValue) => ({type: CHANGE_MAX_VALUE, maxValue})\r\nexport const changeMinValueAC = (minValue) => ({type: CHANGE_MIN_VALUE, minValue})\r\n\r\nexport default reducer;","import React from 'react';\nimport s from './SetPanel.module.css';\nimport Button from \"./Button\";\nimport {connect} from \"react-redux\";\nimport {changeMaxValueAC, changeMinValueAC} from \"../redux/reducer\";\n\nclass SetPanel extends React.Component {\n    changeMaxValue = (e) => {\n        let newValue = Number(e.currentTarget.value)\n        this.props.changeMaxValue(newValue)\n    }\n\n    changeMinValue = (e) => {\n        let newValue = Number(e.currentTarget.value)\n        this.props.changeMinValue(newValue)\n    }\n\n    render = () => {\n        let styleInput = this.props.currentValue === 'Incorrect value' ? s.inputError : s.input;\n        return (\n            <div className={s.setPanel}>\n                <div className={s.setInput}>\n                    <div className={s.max}>\n                        Max Value:\n                        <input className={styleInput} type=\"number\" value={this.props.maxValue} onChange={this.changeMaxValue}/>\n                    </div>\n                    <div>\n                        Start Value:\n                        <input className={styleInput} type=\"number\" value={this.props.minValue} onChange={this.changeMinValue}/>\n                    </div>\n                </div>\n                <div className={s.buttons}>\n                    <Button buttonName={'Set'} funcItem={this.props.setNumbers} disable={this.props.disabledSet}/>\n                </div>\n            </div>\n        );\n    };\n}\n\nconst  mstp = (state) => {\n    return {\n        maxValue: state.maxValue,\n        minValue: state.minValue\n    }\n}\n\nconst  mdtp = (dispatch) => {\n    return {\n        changeMaxValue: (maxValue) => {\n            dispatch(changeMaxValueAC(maxValue))\n        },\n        changeMinValue: (minValue) => {\n            dispatch(changeMinValueAC(minValue))\n        }\n    }\n}\n\nexport default connect(mstp, mdtp)(SetPanel);\n","import React from 'react';\nimport s from './App.module.css';\nimport Counter from \"./components/Counter\";\nimport SetPanel from \"./components/SetPanel\";\nimport {connect} from \"react-redux\";\nimport {addNumber, resetNumber, setNumbers} from \"./redux/reducer\";\n\nclass App extends React.Component {\n    addNumber = () => {\n        this.props.addNumber();\n    };\n\n    resetNumber = () => {\n        this.props.resetNumber();\n    }\n\n    setNumbers = () => {\n        this.props.setNumbers();\n    }\n\n    render = () => {\n        let disabledSet = this.props.maxValue === this.props.minValue || this.props.minValue < 0 || this.props.maxValue < 0 || this.props.minValue > this.props.maxValue;\n        let disabledInc = this.props.currentValue === this.props.maxValue || this.props.currentValue === 'Incorrect value' || this.props.currentValue === 'Enter value and press \\'Set\\'';\n        let disabledRes = this.props.currentValue === this.props.minValue || this.props.currentValue === 'Incorrect value' || this.props.currentValue === 'Enter value and press \\'Set\\'';\n\n        return (\n            <div className={s.App}>\n                <SetPanel\n                          disabledSet={disabledSet}\n                          changeMinValue={this.changeMinValue}\n                          setNumbers={this.setNumbers}\n                />\n                <Counter\n                         disabledInc={disabledInc}\n                         disabledRes={disabledRes}\n                         addNumber={this.addNumber}\n                         resetNumber={this.resetNumber}\n                />\n            </div>\n        );\n    };\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        currentValue: state.currentValue,\n        maxValue: state.maxValue,\n        minValue: state.minValue\n    }\n}\n\nconst ContainedApp = connect (mapStateToProps, {addNumber, resetNumber, setNumbers}) (App)\n\nexport default ContainedApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. NumberCount is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {createStore} from \"redux\";\r\nimport reducer from \"./reducer\";\r\n\r\nconst store = createStore(reducer);\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/redux-store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"setPanel\":\"SetPanel_setPanel__AdHql\",\"setInput\":\"SetPanel_setInput__vKozW\",\"input\":\"SetPanel_input__1SxXR\",\"max\":\"SetPanel_max__2Iptu\",\"inputError\":\"SetPanel_inputError__1IrWg\",\"buttons\":\"SetPanel_buttons__2iJaW\"};"],"sourceRoot":""}